#!/usr/bin/env python3
"""
Script de teste de cen√°rios de vendas para o chatbot
Testa a l√≥gica de conversa√ß√£o sem depend√™ncias externas
"""

import json
import sys
import os

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_conversation_logic():
    """Testa a l√≥gica de conversa√ß√£o"""
    print("üß† Testando l√≥gica de conversa√ß√£o...")
    
    # Cen√°rios de teste
    scenarios = [
        {
            "name": "Sauda√ß√£o inicial",
            "user_message": "Ol√°, boa tarde!",
            "expected_stage": "awareness",
            "expected_intent": "greeting"
        },
        {
            "name": "Interesse em produto",
            "user_message": "Estou procurando uma solu√ß√£o de chatbot para minha empresa",
            "expected_stage": "interest",
            "expected_intent": "question"
        },
        {
            "name": "Obje√ß√£o de pre√ßo",
            "user_message": "Parece muito caro para o meu or√ßamento",
            "expected_stage": "consideration",
            "expected_intent": "objection"
        },
        {
            "name": "Interesse em compra",
            "user_message": "Como posso adquirir essa solu√ß√£o?",
            "expected_stage": "intent",
            "expected_intent": "ready_to_buy"
        }
    ]
    
    success_count = 0
    
    for scenario in scenarios:
        print(f"\nüìù Cen√°rio: {scenario['name']}")
        print(f"   Mensagem: '{scenario['user_message']}'")
        
        # Simula an√°lise de inten√ß√£o
        intent_result = simulate_intent_analysis(scenario['user_message'])
        
        print(f"   Inten√ß√£o detectada: {intent_result['intent']}")
        print(f"   Est√°gio sugerido: {intent_result['stage']}")
        print(f"   Confian√ßa: {intent_result['confidence']:.2f}")
        
        # Verifica se est√° correto
        if (intent_result['intent'] == scenario['expected_intent'] and 
            intent_result['stage'] == scenario['expected_stage']):
            print("   ‚úÖ Cen√°rio passou!")
            success_count += 1
        else:
            print("   ‚ùå Cen√°rio falhou!")
    
    print(f"\nüìä Resultado: {success_count}/{len(scenarios)} cen√°rios passaram")
    return success_count == len(scenarios)

def simulate_intent_analysis(message):
    """Simula an√°lise de inten√ß√£o baseada em palavras-chave"""
    message_lower = message.lower()
    
    # Detecta inten√ß√£o
    if any(word in message_lower for word in ['ol√°', 'oi', 'bom dia', 'boa tarde', 'boa noite']):
        intent = 'greeting'
        stage = 'awareness'
        confidence = 0.9
    elif any(word in message_lower for word in ['procurando', 'preciso', 'quero', 'gostaria']):
        intent = 'question'
        stage = 'interest'
        confidence = 0.8
    elif any(word in message_lower for word in ['caro', 'pre√ßo', 'or√ßamento', 'custo']):
        intent = 'objection'
        stage = 'consideration'
        confidence = 0.85
    elif any(word in message_lower for word in ['comprar', 'adquirir', 'como posso']):
        intent = 'ready_to_buy'
        stage = 'intent'
        confidence = 0.9
    else:
        intent = 'other'
        stage = 'consideration'
        confidence = 0.5
    
    return {
        'intent': intent,
        'stage': stage,
        'confidence': confidence
    }

def test_response_generation():
    """Testa gera√ß√£o de respostas"""
    print("\nüí¨ Testando gera√ß√£o de respostas...")
    
    test_cases = [
        {
            "intent": "greeting",
            "stage": "awareness",
            "expected_elements": ["ol√°", "como posso", "ajudar"]
        },
        {
            "intent": "objection",
            "stage": "consideration",
            "expected_elements": ["entendo", "valor", "benef√≠cio"]
        },
        {
            "intent": "ready_to_buy",
            "stage": "intent",
            "expected_elements": ["pr√≥ximo passo", "vamos", "come√ßar"]
        }
    ]
    
    success_count = 0
    
    for case in test_cases:
        print(f"\nüìù Testando resposta para: {case['intent']} em {case['stage']}")
        
        response = generate_mock_response(case['intent'], case['stage'])
        print(f"   Resposta: {response}")
        
        # Verifica se cont√©m elementos esperados
        response_lower = response.lower()
        found_elements = [elem for elem in case['expected_elements'] 
                         if elem in response_lower]
        
        if len(found_elements) >= 1:  # Pelo menos um elemento deve estar presente
            print(f"   ‚úÖ Elementos encontrados: {found_elements}")
            success_count += 1
        else:
            print(f"   ‚ùå Nenhum elemento esperado encontrado")
    
    print(f"\nüìä Resultado: {success_count}/{len(test_cases)} respostas adequadas")
    return success_count == len(test_cases)

def generate_mock_response(intent, stage):
    """Gera resposta mock baseada na inten√ß√£o e est√°gio"""
    
    responses = {
        ("greeting", "awareness"): "Ol√°! √â um prazer falar com voc√™! Como posso te ajudar hoje?",
        ("question", "interest"): "Que interessante! Conte-me mais sobre suas necessidades para que eu possa te ajudar da melhor forma.",
        ("objection", "consideration"): "Entendo sua preocupa√ß√£o com o investimento. Vamos pensar no valor que isso pode gerar para seu neg√≥cio...",
        ("ready_to_buy", "intent"): "Excelente! Vamos dar o pr√≥ximo passo. Posso te mostrar exatamente como come√ßar!"
    }
    
    key = (intent, stage)
    return responses.get(key, "Obrigado pela sua mensagem! Como posso te ajudar melhor?")

def test_knowledge_base():
    """Testa base de conhecimento"""
    print("\nüìö Testando base de conhecimento...")
    
    # Simula base de conhecimento
    knowledge_items = [
        {
            "category": "product_info",
            "keywords": ["chatbot", "linkmagico", "ia"],
            "content": "O LinkM√°gico √© um chatbot de IA avan√ßada para vendas online."
        },
        {
            "category": "objection_handling",
            "keywords": ["caro", "pre√ßo", "custo"],
            "content": "Quando o cliente menciona pre√ßo, foque no valor e ROI."
        },
        {
            "category": "benefits",
            "keywords": ["24/7", "atendimento", "disponibilidade"],
            "content": "Atendimento 24 horas por dia, 7 dias por semana, sem limites."
        }
    ]
    
    test_queries = [
        "O que √© o LinkM√°gico?",
        "Est√° muito caro",
        "Voc√™s atendem 24 horas?"
    ]
    
    success_count = 0
    
    for query in test_queries:
        print(f"\nüîç Busca: '{query}'")
        
        relevant_items = search_knowledge(query, knowledge_items)
        
        if relevant_items:
            print(f"   ‚úÖ Encontrados {len(relevant_items)} itens relevantes:")
            for item in relevant_items:
                print(f"      - {item['category']}: {item['content'][:50]}...")
            success_count += 1
        else:
            print("   ‚ùå Nenhum item relevante encontrado")
    
    print(f"\nüìä Resultado: {success_count}/{len(test_queries)} buscas bem-sucedidas")
    return success_count == len(test_queries)

def search_knowledge(query, knowledge_items):
    """Busca simples na base de conhecimento"""
    query_lower = query.lower()
    relevant_items = []
    
    for item in knowledge_items:
        # Verifica se alguma palavra-chave est√° na query
        if any(keyword in query_lower for keyword in item['keywords']):
            relevant_items.append(item)
    
    return relevant_items

def test_conversation_flow():
    """Testa fluxo completo de conversa"""
    print("\nüîÑ Testando fluxo completo de conversa...")
    
    conversation_flow = [
        "Ol√°, boa tarde!",
        "Estou procurando uma solu√ß√£o de chatbot",
        "Quantos clientes voc√™s conseguem atender?",
        "E quanto custa?",
        "Parece interessante, mas preciso pensar",
        "Voc√™s t√™m casos de sucesso?",
        "Ok, quero saber como implementar"
    ]
    
    session_context = {
        "stage": "awareness",
        "trust_level": 0.5,
        "engagement_level": 0.5,
        "purchase_readiness": 0.0
    }
    
    print("   Simulando conversa completa...")
    
    for i, message in enumerate(conversation_flow, 1):
        print(f"\n   Intera√ß√£o {i}: '{message}'")
        
        # Analisa mensagem
        intent_result = simulate_intent_analysis(message)
        
        # Atualiza contexto
        session_context = update_session_context(session_context, intent_result)
        
        # Gera resposta
        response = generate_mock_response(intent_result['intent'], intent_result['stage'])
        
        print(f"      Bot: {response[:80]}...")
        print(f"      Est√°gio: {session_context['stage']}")
        print(f"      Confian√ßa: {session_context['trust_level']:.2f}")
        print(f"      Prontid√£o: {session_context['purchase_readiness']:.2f}")
    
    # Verifica se houve progress√£o
    final_readiness = session_context['purchase_readiness']
    if final_readiness > 0.5:
        print(f"\n   ‚úÖ Conversa progrediu bem (prontid√£o final: {final_readiness:.2f})")
        return True
    else:
        print(f"\n   ‚ùå Conversa n√£o progrediu suficientemente (prontid√£o final: {final_readiness:.2f})")
        return False

def update_session_context(context, intent_result):
    """Atualiza contexto da sess√£o"""
    new_context = context.copy()
    
    # Atualiza est√°gio
    new_context['stage'] = intent_result['stage']
    
    # Atualiza m√©tricas baseado na inten√ß√£o
    if intent_result['intent'] == 'greeting':
        new_context['engagement_level'] += 0.1
    elif intent_result['intent'] == 'question':
        new_context['engagement_level'] += 0.15
        new_context['trust_level'] += 0.05
    elif intent_result['intent'] == 'objection':
        new_context['trust_level'] -= 0.1
    elif intent_result['intent'] == 'ready_to_buy':
        new_context['purchase_readiness'] += 0.3
        new_context['trust_level'] += 0.2
    
    # Mant√©m valores entre 0 e 1
    for key in ['trust_level', 'engagement_level', 'purchase_readiness']:
        new_context[key] = max(0.0, min(1.0, new_context[key]))
    
    return new_context

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ Teste de Cen√°rios do LinkM√°gico Chatbot")
    print("=" * 60)
    
    tests = [
        ("L√≥gica de Conversa√ß√£o", test_conversation_logic),
        ("Gera√ß√£o de Respostas", test_response_generation),
        ("Base de Conhecimento", test_knowledge_base),
        ("Fluxo de Conversa", test_conversation_flow)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        print(f"\n{'='*60}")
        print(f"üß™ Executando: {test_name}")
        print("="*60)
        
        try:
            if test_function():
                print(f"\n‚úÖ {test_name} - PASSOU")
                passed_tests += 1
            else:
                print(f"\n‚ùå {test_name} - FALHOU")
        except Exception as e:
            print(f"\nüí• {test_name} - ERRO: {e}")
    
    print(f"\n{'='*60}")
    print(f"üìä RESULTADO FINAL")
    print(f"{'='*60}")
    print(f"Testes passaram: {passed_tests}/{total_tests}")
    print(f"Taxa de sucesso: {(passed_tests/total_tests*100):.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ Todos os testes passaram! O chatbot est√° funcionando corretamente.")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} teste(s) falharam. Verifique a implementa√ß√£o.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

